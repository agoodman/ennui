h1. Overview

ennui is a simple open source toolkit for handling user interactions that prompt the user to enter some information. It aims to reduce the time spent implementing repetetive interface components. It follows the delegate/block pattern to standardize view component behavior and allow easy integration into your code.

h2. Classes

* EditorViewController
* TextInputViewController
* EnumInputViewController
* PhotoInputViewController
* CurrencyInputViewController

h2. Editor

<pre>
EditorViewController* tEditorView = [EditorViewController new];
tEditorView.keys = @[ @"name", @"address", @"phone" ];
tEditorView.config = @{ 
  @"name" : @{ @"required" : @1, @"tag" : @"Name", @"type" : @"text" },
  @"address" : @{ @"required" : @0, @"tag" : @"Street Address", @"type" : @"text" },
  @"phone" : @{ @"required" : @0, @"tag" : @"Phone Number", @"type" : @"text" }
};
tEditorView.fields = @{ @"name" : @"Billy Jean" }; // pre-populate fields if desired
tEditorView.cancelBlock = ^{ [self.navigationController popViewControllerAnimated:YES]; };
tEditorView.saveBlock = ^(NSDictionary* aFields) { // do something with new values };
[self.navigationController pushViewController:tEditorView animated:YES];
</pre>

This results in an editor with three fields (name, address, and phone). The editor will validate presence of the name field. Tapping a field in the editor will display the data input form for the type defined in the config hash.

h2. Autocomplete for Text Input

By assigning an autocomplete data source and delegate to the editor, text fields will show autocomplete results based on the content provided by the data source.

h2. Enumerated Values

<pre>
tEditor.config = @{
  @"color" : @{ @"required" : @1, @"tag" : @"Name", @"type" : @"enum", @"values" : @[ @"cyan", @"magenta", @"yellow", @"black" ] }
};
</pre>

Using the enum type, the field editor will prompt the user to select one of the provided options.

h1. License

This code is published as free open source software. Feel free to fork and contribute.

h1. Usage

I recommend using ennui as a git submodule. You can easily point your submodule to this repo or your fork.

Once you have ennui in your project's directory, add it to your project, selecting only the 'ennui/ennui' directory. This should create a group called ennui in your project, like the one shown in the example project.
 
h1. Example

Included in this repository is a .xcodeproj file. Open that in Xcode and run it to see a few examples of how to use ennui. The example shows the same components used as modal and non-modal views.
